---
layout: post
title:  "Path Tracing Techniques"
date:   2021-09-23 13:44:00 -0700
categories: learning note
---
Refering to [Yan's intro class to Real-Time Rendering][Game101-Class] and [Yan's intermediate class on High-Quality Real-Time Rendering][Game202-Class].

RayTracing is used in computer rendering to make multi-bounce lighting aka. global illumination possible in 3d games and movies. To put it simply, RayTracing is an alghorithm that computes a color of each pixel (the small surface on visible objects) on the screen by finding out the portion of light it reflects to the camera from any possible directions. In those directions, some may point directly to a light source and others may point to other objects. If it's the latter case, we then need to recursively find out what amount of light that object is reflecting to the pixel we are currently looking at. As you may see, this recursion can happen for any random, even infinite number of time. By the way, this infinite number of recursions is happening all the time in our real life. However, our computers can't run into infinite loops. So we generally accept the result generated by a restricted max number of recursions and think that's good enough. 

Implementing a RayTracing renderer needs us to address a lot of problems and details. To start, we definitely need to find out which small piece of surface each beam of light comes across in our scene.

# Intersection Problem

We might start to think of the need to represent shapes of things in a mathematic way. Beams of light are easy ones. They are simply lines. But before writting out their functions, we must decide what space we are using. For 3D space RayTracing, we can just use 3D Euclidean space (just xyz axis perpendicular to each other). There are usually two basic mathematic representation of shapes in the Euclidean space: one is the implicit form and the other is the parametric form. 

Taking plane as an example, we have.

**Implicit Form**: f(x, y, z) = 0

**Parametric Form**: x, y, z = f(t) - for some free parametric t

For lines, you can take a look at [this website][equation-of-lines] where there is no implicit form (a single linear equation) that can represent a line. But keep in mind of the two forms above, we will explaine and use them later.

Let's explain how the parametric form works for lines with the slide below from [Games101][Game101-Class]. This form works in any dimension (we can think of them in 3d space here).

![some-image](/images/Ray.png)

In the slide, "o" is the origin from which the line (or light ray) starts, and "d" is the unit vector describing the direction that the line is following through. They are all constant values. "t" here is the parameter that changes to describe how far we are travelling in the direction "d". It is worth noting here that "t" can be negative, meaning the line is travelling backwards. "r(t)" is the 3d vector that describes the point that the line is reaching at.

In this form, we can solve for t by replacing any (x, y, z) with r(t) and get an equation with only one unknown variable whcih is easy to solve. For example, we can replace any input into the implicit form that we have described earlier with "o + td" and get f(o + td) = 0.





[Game101-Class]: https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html
[Game202-Class]: https://sites.cs.ucsb.edu/~lingqi/teaching/games202.html
[Game101-Class-13]: https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_13.pdf
[Game101-Class-14]: https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_14.pdf
[Game101-Class-15]: https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_15.pdf
[Game101-Class-16]: https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_16.pdf
[Volumetric RayTracing]: https://computergraphics.stackexchange.com/questions/227/how-are-volumetric-effects-handled-in-raytracing
[equation-of-lines]: https://math.stackexchange.com/questions/404440/what-is-the-equation-for-a-3d-line